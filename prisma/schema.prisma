// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// information about the OAuth accounts associated with the user
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// used for database sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// For user specific fields
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  MealPlan      MealPlan[]
  Recipe        Recipe[]
}

// recipe model
model Recipe {
  id          String   @id @default(uuid())
  name        String
  ingredients String[]
  directions  String
  image       String
  category    String
  prepTime    Int
  isFavorite  Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  Day         Day?     @relation(fields: [dayId], references: [id])
  dayId       String?
}

// meal plan model
model MealPlan {
  id          String @id @default(uuid())
  name        String
  description String
  tag         String
  days        Day[]
  chef        User   @relation(fields: [chefId], references: [id])
  chefId      String
}

// day model
model Day {
  id         String    @id @default(uuid())
  name       String    @unique
  recipes    Recipe[]
  MealPlan   MealPlan? @relation(fields: [mealPlanId], references: [id])
  mealPlanId String?
}
