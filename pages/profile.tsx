import { MealPlan, Recipe, User } from "@prisma/client";
import { GetServerSidePropsContext } from "next";
import { unstable_getServerSession } from "next-auth";
import Head from "next/head";
import Image from "next/image";
import client from "../lib/prismadb";
import { authOptions } from "./api/auth/[...nextauth]";

type Props = {
  dbUser: User;
  recipes: Recipe[];
  meal_plans: MealPlan[];
};

const Profile = ({ meal_plans, recipes, dbUser }: Props) => {
  return (
    <>
      <Head>
        <title>{dbUser.name} | Let&#39;s Feast</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="overflow-hidden">
        <div className="p-2  shadow-md">
          <h2 className="w-full text-center my-2 text-xl md:text-2xl">
            Profile
          </h2>
        </div>
        <div className="flex flex-col md:flex-row items-start justify-around w-full">
          <div className="flex flex-col items-center justify-start p-2 w-full md:w-1/3 shadow-md m-1">
            <div
              id="image-container"
              className="w-full overflow-hidden flex items-center justify-center"
            >
              <Image
                src={dbUser.image!}
                width={200}
                height={300}
                alt={dbUser.name!}
                className="hover:scale-110 transition-all duration-500 rounded-full"
              />
            </div>
            <div className="mt-2 w-full text-center">
              <p className="p-1 border-b border-y-black">{dbUser.name}</p>
              <p className="p-1 border-b border-y-black">{dbUser.email}</p>
            </div>
          </div>
          <div className="w-full md:w-3/5 shadow-md p-2 m-1">
            <p>Recipes: {recipes.length}</p>
            <p>Meal Plans: {meal_plans.length}</p>
          </div>
        </div>
      </main>
    </>
  );
};

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );
  if (!session || !session.user) {
    return {
      props: {
        errorMessage: "You must be logged in",
      },
    };
  }
  let user = session.user!;
  const dbUser = await client.user.findUnique({
    where: { email: user.email! },
  });

  const recipes = await client.recipe.findMany({
    where: {
      authorId: dbUser!.id,
    },
  });
  const meal_plans = await client.mealPlan.findMany({
    where: {
      chefId: dbUser!.id,
    },
  });
  return {
    props: {
      dbUser,
      recipes,
      meal_plans,
    },
  };
};

export default Profile;
